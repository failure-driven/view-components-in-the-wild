section
  h2 View Components
  p in
  h2 the Wild

  hr

  ul
    li @saramic (github/twitter)
    li http://bit.ly/vc-wild

section
  h1 Great Intro

  ul
    li
      '
      by Juli치n Pinz칩n
      ul
        li.fragment
          = link_to "https://github.com/pinzonjulian", "https://github.com/pinzonjulian"
        li.fragment
          =link_to "melbourne-ruby issue #158", "https://github.com/rails-oceania/melbourne-ruby/issues/158"
        li.fragment
         = link_to "Ruby Au YouTube - View Component 101 by Juli치n Pinz칩n", "https://youtu.be/Lzsb-Q5Lm9g"

section
  h1 Today

  ul
    li.fragment who is Fresho and why view components
    li.fragment basic example of view unit test and integration test
    li.fragment
      ' a rails "form story"
      ul
        li.fragment from -> rails scaffold
        li.fragment to -> some improvements
        li.fragment to -> switching to view components
    li.fragment
      ' what have we learnt?
      ul
        li.fragment You decide!
    li.fragment @saramic
    li.fragment http://bit.ly/vc-wild
    li.fragment https://failure-driven.com/

section
  h2 view components in the
  h1 wild

  ul
    li.fragment started - few months ago
    li.fragment got it - last week
    li.fragment re-wrote a whole demo project - last 24 hours
    li.fragment
      ' warts and all
      ul
        li.fragment don't try everything in production
        li.fragment should lead to lots of questions
        li.fragment I probably don't have the answer

section
  h2 fresho

  ul
    li.fragment Fresho food marketplace (B2B & B2C)
    li.fragment http://fresho.com
    li.fragment we are hiring

section
  h2 Fresho + architecture

  ul
    li.fragment rails monolith + web services
    li.fragment EmberJS + ReactJS via API
    li.fragment ActiveAdmin
    li.fragment + more and more rails

section
  h2 Fresho + testing

  ul
    li.fragment we test everything 
    li.fragment integration + unit
    li.fragment we even test rails views

section
  h2 testing example

  p.fragment we want to render an email field on a form
  pre.fragment: code.erb
    '
      <%= f.email_field :email %>

  p.fragment to generate the following html
  pre.fragment: code.html
    '
      &lt;div>
        &lt;label for="user_email">Email</label>
        &lt;input type="email" id="user_email" />
      &lt;/div>

  p.fragment we may want to test it like so
  pre.fragment: code.ruby
    '
      describe "users/new", type: :view do
        ...
        it "renders an email input filed" do
          render

          email_field = Capybara.string(rendered)
            .find('label[for="user_email"]')
            .find(:xpath, "..")

          expect(email_field.find("label").text).to eq "Email"
          expect(email_field.find("label")["for"]).to eq "user_email"
          expect(email_field.find("input")["id"]).to eq "user_email"
          expect(email_field.find("input")["type"]).to eq "email"
          expect(email_field.find("input")["name"]).to eq "user[email]"
        end
        ...

section
  h2 integration test

  p.fragment we want to render an email field on a form
  pre.fragment: code.erb
    '
      <%= f.email_field :email %>

  p.fragment we may want to test it like so
  pre.fragment: code.ruby
    '
      scenario "I can create a user" do
        When "I try to create a new user" do
          visit new_user_path
          page.fill_in("Name", with: "Mi")
          page.fill_in("Email", with: "saramic@gmail")
          page.fill_in("Age", with: "4")
          page.fill_in("Password", with: "asdf")
          page.click_on("Create User")
        end
        ...

section
  h2 demo
  pre.fragment: code.bash
    '
      rails generate scaffold User  \
        name:string                 \
        email:string                \
        age:integer                 \
        password:string

      rspec spec/features/create_user_spec.rb
      rspec spec/views/users/new.html.erb_spec.rb

      open http://localhost:3000/users/new

  ul
    li.fragment integration run
    li.fragment unit run
    li.fragment show in browser
    li.fragment show the ERB
    li.fragment show the test

section
  h2 slight improvement

  pre.fragment: code.bash
    '
      open http://localhost:3000/v2_users/new
  ul
    li.fragment show in browser
    li.fragment show the ERB
    li.fragment show the test

section 

  h2 let's add view components

  p.fragment this
  pre.fragment: code.erb
    '
      &lt;% content_for :page_title do %>
        New V2 User
      &lt;% end %>

      &lt;div class="row mt-5">
        &lt;div class="col-md-6 offset-md-3">
          &lt;div class="card mb-3">
            &lt;div class="card-header">
              featured
            &lt;/div>
            &lt;div class="card-body">
              &lt;h1 class="card-title">New V2 User&lt;/h1>
              &lt;div class="card-text">
                &lt;%= render 'form', v2_user: @v2_user %>
                ...

  p.fragment becomes
  pre.fragment: code.erb
    '
      &lt;% content_for :page_title do %>
        New V3 User
      &lt;% end %>

      &lt;%= render(Features::NewV3User::NewV3UserComponent.new(v3_user: @v3_user)) %>

section 

  h2 More code dive

  ul
    li folder structure
    li test calling a view component
    li test calling a slot
    li test calling a view comonent calling a view component
    li all the code as a comparison

section
  h1 We have learnt

  ul
    li.fragment Fresho uses view components
    li.fragment
      ' a rails "form story"
      ul
        li.fragment from -> rails scaffold
        li.fragment to -> some improvements
        li.fragment to -> switching to view components
    li.fragment Let's discuss

  h2.fragment Thank you
  ul
    li.fragment @saramic
    li.fragment http://bit.ly/vc-wild
    li.fragment https://failure-driven.com/